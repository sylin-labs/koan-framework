name: nuget-release
on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pack-and-push-all:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Install nuget.exe
        uses: nuget/setup-nuget@v2
      - name: Restore
        shell: pwsh
        run: |
          $list = 
            & pwsh -NoProfile -ExecutionPolicy Bypass -File ./.github/scripts/find-packable-csproj.ps1
          foreach ($p in $list) {
            Write-Host "Restoring $p" -ForegroundColor Cyan
            dotnet restore "$p"
          }
      - name: Compute version
        id: nbgv
        shell: pwsh
        run: |
          # Ensure the nbgv tool is available (update if present, install otherwise)
          dotnet tool update --global nbgv || dotnet tool install --global nbgv
          # Resolve the nbgv executable reliably on Windows runners
          $nbgv = (Get-Command nbgv -ErrorAction SilentlyContinue)?.Source
          if (-not $nbgv) {
            $nbgv = Join-Path $env:USERPROFILE ".dotnet/tools/nbgv.exe"
          }
          if (-not (Test-Path $nbgv)) { throw "nbgv tool not found on PATH or at $nbgv" }
          $nugetVersion = & $nbgv get-version -v NuGetPackageVersion
          echo "NUGETVERSION=$nugetVersion" >> $env:GITHUB_OUTPUT
      - name: Pack all src projects (stable)
        run: |
          pwsh -File ./.github/scripts/find-packable-csproj.ps1 > list.txt
          Get-Content list.txt | ForEach-Object { dotnet pack $_ -c Release }
      - name: Pack meta packages
        run: pwsh ./.github/scripts/pack-meta.ps1 -Version "${{ steps.nbgv.outputs.NUGETVERSION }}" -OutDir artifacts
      - name: Verify NUGET_API_KEY present
        shell: pwsh
        run: |
          if (-not $env:NUGET_API_KEY) { throw "NUGET_API_KEY is empty or not provided" }
          Write-Host "NUGET_API_KEY supplied (length: $($env:NUGET_API_KEY.Length))"
      - name: Push all to nuget.org
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push **/*.nupkg --api-key "$env:NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push **/*.snupkg --api-key "$env:NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
