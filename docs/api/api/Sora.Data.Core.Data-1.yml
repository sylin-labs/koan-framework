### YamlMime:ManagedReference
items:
- uid: Sora.Data.Core.Data`1
  commentId: T:Sora.Data.Core.Data`1
  id: Data`1
  parent: Sora.Data.Core
  children:
  - Sora.Data.Core.Data`1.All(System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Batch
  - Sora.Data.Core.Data`1.Count(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Count(System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.DeleteAsync(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Execute``1(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.GetAsync(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.Query(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`1.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Data<TEntity>
  nameWithType: Data<TEntity>
  fullName: Sora.Data.Core.Data<TEntity>
  type: Class
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Data
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 241
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: 'public static class Data<TEntity> where TEntity : class, IEntity<string>'
    typeParameters:
    - id: TEntity
    content.vb: Public Module Data(Of TEntity As {Module, IEntity(Of String)})
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Data(Of TEntity)
  fullName.vb: Sora.Data.Core.Data(Of TEntity)
  name.vb: Data(Of TEntity)
- uid: Sora.Data.Core.Data`1.GetAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: GetAsync(string, CancellationToken)
  nameWithType: Data<TEntity>.GetAsync(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.GetAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: GetAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 244
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TEntity?> GetAsync(string id, CancellationToken ct = default)
    parameters:
    - id: id
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function GetAsync(id As String, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.Data`1.GetAsync*
  nameWithType.vb: Data(Of TEntity).GetAsync(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).GetAsync(String, System.Threading.CancellationToken)
  name.vb: GetAsync(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.All(System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.All(System.Threading.CancellationToken)
  id: All(System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: All(CancellationToken)
  nameWithType: Data<TEntity>.All(CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.All(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: All
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 247
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> All(CancellationToken ct = default)
    parameters:
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function All(ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`1.All*
  nameWithType.vb: Data(Of TEntity).All(CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).All(System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`1.Query(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Query(System.String,System.Threading.CancellationToken)
  id: Query(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Query(string, CancellationToken)
  nameWithType: Data<TEntity>.Query(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Query(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Query
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 249
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> Query(string query, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function Query(query As String, ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`1.Query*
  nameWithType.vb: Data(Of TEntity).Query(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Query(String, System.Threading.CancellationToken)
  name.vb: Query(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.Count(System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Count(System.Threading.CancellationToken)
  id: Count(System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Count(CancellationToken)
  nameWithType: Data<TEntity>.Count(CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Count(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Count
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 251
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Count(CancellationToken ct = default)
    parameters:
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Count(ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.Count*
  nameWithType.vb: Data(Of TEntity).Count(CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Count(System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`1.Count(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Count(System.String,System.Threading.CancellationToken)
  id: Count(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Count(string, CancellationToken)
  nameWithType: Data<TEntity>.Count(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Count(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Count
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 253
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Count(string query, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Count(query As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.Count*
  nameWithType.vb: Data(Of TEntity).Count(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Count(String, System.Threading.CancellationToken)
  name.vb: Count(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.DeleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(string, CancellationToken)
  nameWithType: Data<TEntity>.DeleteAsync(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.DeleteAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 256
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<bool> DeleteAsync(string id, CancellationToken ct = default)
    parameters:
    - id: id
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function DeleteAsync(id As String, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.Data`1.DeleteAsync*
  nameWithType.vb: Data(Of TEntity).DeleteAsync(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).DeleteAsync(String, System.Threading.CancellationToken)
  name.vb: DeleteAsync(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: DeleteManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: DeleteManyAsync(IEnumerable<string>, CancellationToken)
  nameWithType: Data<TEntity>.DeleteManyAsync(IEnumerable<string>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.DeleteManyAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 259
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> DeleteManyAsync(IEnumerable<string> ids, CancellationToken ct = default)
    parameters:
    - id: ids
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function DeleteManyAsync(ids As IEnumerable(Of String), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.DeleteManyAsync*
  nameWithType.vb: Data(Of TEntity).DeleteManyAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).DeleteManyAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: DeleteManyAsync(IEnumerable(Of String), CancellationToken)
- uid: Sora.Data.Core.Data`1.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  id: UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: UpsertManyAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType: Data<TEntity>.UpsertManyAsync(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.UpsertManyAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 262
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> UpsertManyAsync(IEnumerable<TEntity> models, CancellationToken ct = default)
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function UpsertManyAsync(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.UpsertManyAsync*
  nameWithType.vb: Data(Of TEntity).UpsertManyAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).UpsertManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: UpsertManyAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.Data`1.Batch
  commentId: M:Sora.Data.Core.Data`1.Batch
  id: Batch
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Batch()
  nameWithType: Data<TEntity>.Batch()
  fullName: Sora.Data.Core.Data<TEntity>.Batch()
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Batch
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 265
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static IBatchSet<TEntity, string> Batch()
    return:
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},System.String}
    content.vb: Public Shared Function Batch() As IBatchSet(Of TEntity, String)
  overload: Sora.Data.Core.Data`1.Batch*
  nameWithType.vb: Data(Of TEntity).Batch()
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Batch()
- uid: Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  id: Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Instruction, CancellationToken)
  nameWithType: Data<TEntity>.Execute<TResult>(Instruction, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute<TResult>(Sora.Data.Abstractions.Instructions.Instruction, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 269
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(Instruction instruction, CancellationToken ct = default)
    parameters:
    - id: instruction
      type: Sora.Data.Abstractions.Instructions.Instruction
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(instruction As Instruction, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(Of TResult)(Instruction, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(Of TResult)(Sora.Data.Abstractions.Instructions.Instruction, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(Instruction, CancellationToken)
- uid: Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  id: Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Instruction, IDataService, CancellationToken)
  nameWithType: Data<TEntity>.Execute<TResult>(Instruction, IDataService, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute<TResult>(Sora.Data.Abstractions.Instructions.Instruction, Sora.Data.Core.IDataService, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 272
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(Instruction instruction, IDataService data, CancellationToken ct = default)
    parameters:
    - id: instruction
      type: Sora.Data.Abstractions.Instructions.Instruction
    - id: data
      type: Sora.Data.Core.IDataService
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(instruction As Instruction, data As IDataService, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(Of TResult)(Instruction, IDataService, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(Of TResult)(Sora.Data.Abstractions.Instructions.Instruction, Sora.Data.Core.IDataService, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(Instruction, IDataService, CancellationToken)
- uid: Sora.Data.Core.Data`1.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  id: Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute(string, IDataService, object?, CancellationToken)
  nameWithType: Data<TEntity>.Execute(string, IDataService, object?, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute(string, Sora.Data.Core.IDataService, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 276
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Execute(string sql, IDataService data, object? parameters = null, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: data
      type: Sora.Data.Core.IDataService
    - id: parameters
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Execute(sql As String, data As IDataService, parameters As Object = Nothing, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(String, IDataService, Object, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(String, Sora.Data.Core.IDataService, Object, System.Threading.CancellationToken)
  name.vb: Execute(String, IDataService, Object, CancellationToken)
- uid: Sora.Data.Core.Data`1.Execute(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute(System.String,System.Threading.CancellationToken)
  id: Execute(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute(string, CancellationToken)
  nameWithType: Data<TEntity>.Execute(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 280
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Execute(string sql, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Execute(sql As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(String, System.Threading.CancellationToken)
  name.vb: Execute(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.Execute``1(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute``1(System.String,System.Threading.CancellationToken)
  id: Execute``1(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute<TResult>(string, CancellationToken)
  nameWithType: Data<TEntity>.Execute<TResult>(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute<TResult>(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 284
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(string sql, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(sql As String, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(Of TResult)(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(Of TResult)(String, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(String, CancellationToken)
- uid: Sora.Data.Core.Data`1.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`1.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  id: Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`1
  langs:
  - csharp
  - vb
  name: Execute<TResult>(string, IDataService, object?, CancellationToken)
  nameWithType: Data<TEntity>.Execute<TResult>(string, IDataService, object?, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity>.Execute<TResult>(string, Sora.Data.Core.IDataService, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 287
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(string sql, IDataService data, object? parameters = null, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: data
      type: Sora.Data.Core.IDataService
    - id: parameters
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(sql As String, data As IDataService, parameters As Object = Nothing, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`1.Execute*
  nameWithType.vb: Data(Of TEntity).Execute(Of TResult)(String, IDataService, Object, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute(Of TResult)(String, Sora.Data.Core.IDataService, Object, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(String, IDataService, Object, CancellationToken)
references:
- uid: Sora.Data.Core
  commentId: N:Sora.Data.Core
  href: Sora.html
  name: Sora.Data.Core
  nameWithType: Sora.Data.Core
  fullName: Sora.Data.Core
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sora.Data.Core.Data`1.GetAsync*
  commentId: Overload:Sora.Data.Core.Data`1.GetAsync
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_GetAsync_System_String_System_Threading_CancellationToken_
  name: GetAsync
  nameWithType: Data<TEntity>.GetAsync
  fullName: Sora.Data.Core.Data<TEntity>.GetAsync
  nameWithType.vb: Data(Of TEntity).GetAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity).GetAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Sora.Data.Core.Data`1.All*
  commentId: Overload:Sora.Data.Core.Data`1.All
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_All_System_Threading_CancellationToken_
  name: All
  nameWithType: Data<TEntity>.All
  fullName: Sora.Data.Core.Data<TEntity>.All
  nameWithType.vb: Data(Of TEntity).All
  fullName.vb: Sora.Data.Core.Data(Of TEntity).All
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyList<TEntity>>
  nameWithType: Task<IReadOnlyList<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TEntity>>
  nameWithType.vb: Task(Of IReadOnlyList(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of TEntity))
  name.vb: Task(Of IReadOnlyList(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: Sora.Data.Core.Data`1.Query*
  commentId: Overload:Sora.Data.Core.Data`1.Query
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_Query_System_String_System_Threading_CancellationToken_
  name: Query
  nameWithType: Data<TEntity>.Query
  fullName: Sora.Data.Core.Data<TEntity>.Query
  nameWithType.vb: Data(Of TEntity).Query
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Query
- uid: Sora.Data.Core.Data`1.Count*
  commentId: Overload:Sora.Data.Core.Data`1.Count
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_Count_System_Threading_CancellationToken_
  name: Count
  nameWithType: Data<TEntity>.Count
  fullName: Sora.Data.Core.Data<TEntity>.Count
  nameWithType.vb: Data(Of TEntity).Count
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Count
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Sora.Data.Core.Data`1.DeleteAsync*
  commentId: Overload:Sora.Data.Core.Data`1.DeleteAsync
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_DeleteAsync_System_String_System_Threading_CancellationToken_
  name: DeleteAsync
  nameWithType: Data<TEntity>.DeleteAsync
  fullName: Sora.Data.Core.Data<TEntity>.DeleteAsync
  nameWithType.vb: Data(Of TEntity).DeleteAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity).DeleteAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sora.Data.Core.Data`1.DeleteManyAsync*
  commentId: Overload:Sora.Data.Core.Data`1.DeleteManyAsync
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_DeleteManyAsync_System_Collections_Generic_IEnumerable_System_String__System_Threading_CancellationToken_
  name: DeleteManyAsync
  nameWithType: Data<TEntity>.DeleteManyAsync
  fullName: Sora.Data.Core.Data<TEntity>.DeleteManyAsync
  nameWithType.vb: Data(Of TEntity).DeleteManyAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity).DeleteManyAsync
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Sora.Data.Core.Data`1.UpsertManyAsync*
  commentId: Overload:Sora.Data.Core.Data`1.UpsertManyAsync
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_UpsertManyAsync_System_Collections_Generic_IEnumerable__0__System_Threading_CancellationToken_
  name: UpsertManyAsync
  nameWithType: Data<TEntity>.UpsertManyAsync
  fullName: Sora.Data.Core.Data<TEntity>.UpsertManyAsync
  nameWithType.vb: Data(Of TEntity).UpsertManyAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity).UpsertManyAsync
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Sora.Data.Core.Data`1.Batch*
  commentId: Overload:Sora.Data.Core.Data`1.Batch
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_Batch
  name: Batch
  nameWithType: Data<TEntity>.Batch
  fullName: Sora.Data.Core.Data<TEntity>.Batch
  nameWithType.vb: Data(Of TEntity).Batch
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Batch
- uid: Sora.Data.Abstractions.IBatchSet{{TEntity},System.String}
  commentId: T:Sora.Data.Abstractions.IBatchSet{``0,System.String}
  parent: Sora.Data.Abstractions
  definition: Sora.Data.Abstractions.IBatchSet`2
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: IBatchSet<TEntity, string>
  nameWithType: IBatchSet<TEntity, string>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, string>
  nameWithType.vb: IBatchSet(Of TEntity, String)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, String)
  name.vb: IBatchSet(Of TEntity, String)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sora.Data.Abstractions.IBatchSet`2
  commentId: T:Sora.Data.Abstractions.IBatchSet`2
  parent: Sora.Data.Abstractions
  href: Sora.Data.Abstractions.IBatchSet-2.html
  name: IBatchSet<TEntity, TKey>
  nameWithType: IBatchSet<TEntity, TKey>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, TKey>
  nameWithType.vb: IBatchSet(Of TEntity, TKey)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey)
  name.vb: IBatchSet(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Abstractions
  commentId: N:Sora.Data.Abstractions
  href: Sora.html
  name: Sora.Data.Abstractions
  nameWithType: Sora.Data.Abstractions
  fullName: Sora.Data.Abstractions
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
- uid: Sora.Data.Core.Data`1.Execute*
  commentId: Overload:Sora.Data.Core.Data`1.Execute
  href: Sora.Data.Core.Data-1.html#Sora_Data_Core_Data_1_Execute__1_Sora_Data_Abstractions_Instructions_Instruction_System_Threading_CancellationToken_
  name: Execute
  nameWithType: Data<TEntity>.Execute
  fullName: Sora.Data.Core.Data<TEntity>.Execute
  nameWithType.vb: Data(Of TEntity).Execute
  fullName.vb: Sora.Data.Core.Data(Of TEntity).Execute
- uid: Sora.Data.Abstractions.Instructions.Instruction
  commentId: T:Sora.Data.Abstractions.Instructions.Instruction
  parent: Sora.Data.Abstractions.Instructions
  href: Sora.Data.Abstractions.Instructions.Instruction.html
  name: Instruction
  nameWithType: Instruction
  fullName: Sora.Data.Abstractions.Instructions.Instruction
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Sora.Data.Abstractions.Instructions
  commentId: N:Sora.Data.Abstractions.Instructions
  href: Sora.html
  name: Sora.Data.Abstractions.Instructions
  nameWithType: Sora.Data.Abstractions.Instructions
  fullName: Sora.Data.Abstractions.Instructions
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  - name: .
  - uid: Sora.Data.Abstractions.Instructions
    name: Instructions
    href: Sora.Data.Abstractions.Instructions.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  - name: .
  - uid: Sora.Data.Abstractions.Instructions
    name: Instructions
    href: Sora.Data.Abstractions.Instructions.html
- uid: Sora.Data.Core.IDataService
  commentId: T:Sora.Data.Core.IDataService
  parent: Sora.Data.Core
  href: Sora.Data.Core.IDataService.html
  name: IDataService
  nameWithType: IDataService
  fullName: Sora.Data.Core.IDataService
