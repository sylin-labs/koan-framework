### YamlMime:ManagedReference
items:
- uid: Sora.Data.Core.Data`2
  commentId: T:Sora.Data.Core.Data`2
  id: Data`2
  parent: Sora.Data.Core
  children:
  - Sora.Data.Core.Data`2.All(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.All(System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Batch
  - Sora.Data.Core.Data`2.ClearSet(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CopySet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAllAsync(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAllAsync(System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAsync(System.String,System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.CountAsync(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.DeleteAllAsync(System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.DeleteAsync(`1,System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.DeleteAsync(`1,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Execute``1(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.GetAsync(`1,System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.GetAsync(`1,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.MoveFrom(System.String)
  - Sora.Data.Core.Data`2.MoveSet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Query(System.String,System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.Query(System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.QueryCaps
  - Sora.Data.Core.Data`2.ReplaceSet(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.UpsertAsync(`0,System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.String,System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  - Sora.Data.Core.Data`2.WithSet(System.String)
  - Sora.Data.Core.Data`2.WriteCaps
  langs:
  - csharp
  - vb
  name: Data<TEntity, TKey>
  nameWithType: Data<TEntity, TKey>
  fullName: Sora.Data.Core.Data<TEntity, TKey>
  type: Class
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Data
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 292
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: 'public static class Data<TEntity, TKey> where TEntity : class, IEntity<TKey> where TKey : notnull'
    typeParameters:
    - id: TEntity
    - id: TKey
    content.vb: Public Module Data(Of TEntity As {Module, IEntity(Of TKey)}, TKey)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Data(Of TEntity, TKey)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey)
  name.vb: Data(Of TEntity, TKey)
- uid: Sora.Data.Core.Data`2.QueryCaps
  commentId: P:Sora.Data.Core.Data`2.QueryCaps
  id: QueryCaps
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: QueryCaps
  nameWithType: Data<TEntity, TKey>.QueryCaps
  fullName: Sora.Data.Core.Data<TEntity, TKey>.QueryCaps
  type: Property
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: QueryCaps
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 300
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static IQueryCapabilities QueryCaps { get; }
    parameters: []
    return:
      type: Sora.Data.Abstractions.IQueryCapabilities
    content.vb: Public Shared ReadOnly Property QueryCaps As IQueryCapabilities
  overload: Sora.Data.Core.Data`2.QueryCaps*
  nameWithType.vb: Data(Of TEntity, TKey).QueryCaps
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).QueryCaps
- uid: Sora.Data.Core.Data`2.WriteCaps
  commentId: P:Sora.Data.Core.Data`2.WriteCaps
  id: WriteCaps
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: WriteCaps
  nameWithType: Data<TEntity, TKey>.WriteCaps
  fullName: Sora.Data.Core.Data<TEntity, TKey>.WriteCaps
  type: Property
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: WriteCaps
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 303
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static IWriteCapabilities WriteCaps { get; }
    parameters: []
    return:
      type: Sora.Data.Abstractions.IWriteCapabilities
    content.vb: Public Shared ReadOnly Property WriteCaps As IWriteCapabilities
  overload: Sora.Data.Core.Data`2.WriteCaps*
  nameWithType.vb: Data(Of TEntity, TKey).WriteCaps
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).WriteCaps
- uid: Sora.Data.Core.Data`2.GetAsync(`1,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.GetAsync(`1,System.Threading.CancellationToken)
  id: GetAsync(`1,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: GetAsync(TKey, CancellationToken)
  nameWithType: Data<TEntity, TKey>.GetAsync(TKey, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.GetAsync(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: GetAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 306
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TEntity?> GetAsync(TKey id, CancellationToken ct = default)
    parameters:
    - id: id
      type: '{TKey}'
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function GetAsync(id As TKey, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.Data`2.GetAsync*
  nameWithType.vb: Data(Of TEntity, TKey).GetAsync(TKey, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).GetAsync(TKey, System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`2.All(System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.All(System.Threading.CancellationToken)
  id: All(System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: All(CancellationToken)
  nameWithType: Data<TEntity, TKey>.All(CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.All(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: All
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 307
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> All(CancellationToken ct = default)
    parameters:
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function All(ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.All*
  nameWithType.vb: Data(Of TEntity, TKey).All(CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).All(System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Query(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Query(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Query
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 308
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> Query(Expression<Func<TEntity, bool>> predicate, CancellationToken ct = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function Query(predicate As Expression(Of Func(Of TEntity, Boolean)), ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.Query*
  nameWithType.vb: Data(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: Sora.Data.Core.Data`2.Query(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Query(System.String,System.Threading.CancellationToken)
  id: Query(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Query(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Query(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Query(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Query
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 311
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> Query(string query, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function Query(query As String, ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.Query*
  nameWithType.vb: Data(Of TEntity, TKey).Query(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Query(String, System.Threading.CancellationToken)
  name.vb: Query(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAllAsync(System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAllAsync(System.Threading.CancellationToken)
  id: CountAllAsync(System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAllAsync(CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAllAsync(CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAllAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAllAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 314
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAllAsync(CancellationToken ct = default)
    parameters:
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAllAsync(ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAllAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAllAsync(CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAllAsync(System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 316
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken ct = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAsync(System.String,System.Threading.CancellationToken)
  id: CountAsync(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAsync(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAsync(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 319
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAsync(string query, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAsync(query As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAsync(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAsync(String, System.Threading.CancellationToken)
  name.vb: CountAsync(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.DeleteAsync(`1,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.DeleteAsync(`1,System.Threading.CancellationToken)
  id: DeleteAsync(`1,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TKey, CancellationToken)
  nameWithType: Data<TEntity, TKey>.DeleteAsync(TKey, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteAsync(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 322
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<bool> DeleteAsync(TKey id, CancellationToken ct = default)
    parameters:
    - id: id
      type: '{TKey}'
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function DeleteAsync(id As TKey, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.Data`2.DeleteAsync*
  nameWithType.vb: Data(Of TEntity, TKey).DeleteAsync(TKey, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteAsync(TKey, System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  id: DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: DeleteManyAsync(IEnumerable<TKey>, CancellationToken)
  nameWithType: Data<TEntity, TKey>.DeleteManyAsync(IEnumerable<TKey>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteManyAsync(System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 323
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> DeleteManyAsync(IEnumerable<TKey> ids, CancellationToken ct = default)
    parameters:
    - id: ids
      type: System.Collections.Generic.IEnumerable{{TKey}}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function DeleteManyAsync(ids As IEnumerable(Of TKey), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.DeleteManyAsync*
  nameWithType.vb: Data(Of TEntity, TKey).DeleteManyAsync(IEnumerable(Of TKey), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteManyAsync(System.Collections.Generic.IEnumerable(Of TKey), System.Threading.CancellationToken)
  name.vb: DeleteManyAsync(IEnumerable(Of TKey), CancellationToken)
- uid: Sora.Data.Core.Data`2.DeleteAllAsync(System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.DeleteAllAsync(System.Threading.CancellationToken)
  id: DeleteAllAsync(System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: DeleteAllAsync(CancellationToken)
  nameWithType: Data<TEntity, TKey>.DeleteAllAsync(CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteAllAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteAllAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 324
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> DeleteAllAsync(CancellationToken ct = default)
    parameters:
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function DeleteAllAsync(ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.DeleteAllAsync*
  nameWithType.vb: Data(Of TEntity, TKey).DeleteAllAsync(CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteAllAsync(System.Threading.CancellationToken)
- uid: Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  id: UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: UpsertManyAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType: Data<TEntity, TKey>.UpsertManyAsync(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.UpsertManyAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 325
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> UpsertManyAsync(IEnumerable<TEntity> models, CancellationToken ct = default)
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function UpsertManyAsync(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.UpsertManyAsync*
  nameWithType.vb: Data(Of TEntity, TKey).UpsertManyAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).UpsertManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: UpsertManyAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.Data`2.Batch
  commentId: M:Sora.Data.Core.Data`2.Batch
  id: Batch
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Batch()
  nameWithType: Data<TEntity, TKey>.Batch()
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Batch()
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Batch
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 326
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static IBatchSet<TEntity, TKey> Batch()
    return:
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
    content.vb: Public Shared Function Batch() As IBatchSet(Of TEntity, TKey)
  overload: Sora.Data.Core.Data`2.Batch*
  nameWithType.vb: Data(Of TEntity, TKey).Batch()
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Batch()
- uid: Sora.Data.Core.Data`2.WithSet(System.String)
  commentId: M:Sora.Data.Core.Data`2.WithSet(System.String)
  id: WithSet(System.String)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: WithSet(string?)
  nameWithType: Data<TEntity, TKey>.WithSet(string?)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.WithSet(string?)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: WithSet
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 329
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static IDisposable WithSet(string? set)
    parameters:
    - id: set
      type: System.String
    return:
      type: System.IDisposable
    content.vb: Public Shared Function WithSet([set] As String) As IDisposable
  overload: Sora.Data.Core.Data`2.WithSet*
  nameWithType.vb: Data(Of TEntity, TKey).WithSet(String)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).WithSet(String)
  name.vb: WithSet(String)
- uid: Sora.Data.Core.Data`2.GetAsync(`1,System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.GetAsync(`1,System.String,System.Threading.CancellationToken)
  id: GetAsync(`1,System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: GetAsync(TKey, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.GetAsync(TKey, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.GetAsync(TKey, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: GetAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 331
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TEntity?> GetAsync(TKey id, string set, CancellationToken ct = default)
    parameters:
    - id: id
      type: '{TKey}'
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function GetAsync(id As TKey, [set] As String, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.Data`2.GetAsync*
  nameWithType.vb: Data(Of TEntity, TKey).GetAsync(TKey, String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).GetAsync(TKey, String, System.Threading.CancellationToken)
  name.vb: GetAsync(TKey, String, CancellationToken)
- uid: Sora.Data.Core.Data`2.All(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.All(System.String,System.Threading.CancellationToken)
  id: All(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: All(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.All(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.All(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: All
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 334
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> All(string set, CancellationToken ct = default)
    parameters:
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function All([set] As String, ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.All*
  nameWithType.vb: Data(Of TEntity, TKey).All(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).All(String, System.Threading.CancellationToken)
  name.vb: All(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAllAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAllAsync(System.String,System.Threading.CancellationToken)
  id: CountAllAsync(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAllAsync(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAllAsync(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAllAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAllAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 336
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAllAsync(string set, CancellationToken ct = default)
    parameters:
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAllAsync([set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAllAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAllAsync(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAllAsync(String, System.Threading.CancellationToken)
  name.vb: CountAllAsync(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  id: Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Query(Expression<Func<TEntity, bool>>, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Query(Expression<Func<TEntity, bool>>, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Query
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 339
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> Query(Expression<Func<TEntity, bool>> predicate, string set, CancellationToken ct = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function Query(predicate As Expression(Of Func(Of TEntity, Boolean)), [set] As String, ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.Query*
  nameWithType.vb: Data(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), String, System.Threading.CancellationToken)
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  id: CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAsync(Expression<Func<TEntity, bool>>, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAsync(Expression<Func<TEntity, bool>>, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 342
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAsync(Expression<Func<TEntity, bool>> predicate, string set, CancellationToken ct = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), [set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAsync(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), String, System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Query(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Query(System.String,System.String,System.Threading.CancellationToken)
  id: Query(System.String,System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Query(string, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Query(string, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Query(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Query
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 346
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<IReadOnlyList<TEntity>> Query(string query, string set, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
    content.vb: Public Shared Function Query(query As String, [set] As String, ct As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of TEntity))
  overload: Sora.Data.Core.Data`2.Query*
  nameWithType.vb: Data(Of TEntity, TKey).Query(String, String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Query(String, String, System.Threading.CancellationToken)
  name.vb: Query(String, String, CancellationToken)
- uid: Sora.Data.Core.Data`2.CountAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CountAsync(System.String,System.String,System.Threading.CancellationToken)
  id: CountAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CountAsync(string, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CountAsync(string, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CountAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 349
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CountAsync(string query, string set, CancellationToken ct = default)
    parameters:
    - id: query
      type: System.String
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CountAsync(query As String, [set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CountAsync*
  nameWithType.vb: Data(Of TEntity, TKey).CountAsync(String, String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAsync(String, String, System.Threading.CancellationToken)
  name.vb: CountAsync(String, String, CancellationToken)
- uid: Sora.Data.Core.Data`2.UpsertAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.UpsertAsync(`0,System.String,System.Threading.CancellationToken)
  id: UpsertAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: UpsertAsync(TEntity, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.UpsertAsync(TEntity, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.UpsertAsync(TEntity, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 353
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TEntity> UpsertAsync(TEntity model, string set, CancellationToken ct = default)
    parameters:
    - id: model
      type: '{TEntity}'
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function UpsertAsync(model As TEntity, [set] As String, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.Data`2.UpsertAsync*
  nameWithType.vb: Data(Of TEntity, TKey).UpsertAsync(TEntity, String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).UpsertAsync(TEntity, String, System.Threading.CancellationToken)
  name.vb: UpsertAsync(TEntity, String, CancellationToken)
- uid: Sora.Data.Core.Data`2.DeleteAsync(`1,System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.DeleteAsync(`1,System.String,System.Threading.CancellationToken)
  id: DeleteAsync(`1,System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TKey, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.DeleteAsync(TKey, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteAsync(TKey, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 356
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<bool> DeleteAsync(TKey id, string set, CancellationToken ct = default)
    parameters:
    - id: id
      type: '{TKey}'
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function DeleteAsync(id As TKey, [set] As String, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.Data`2.DeleteAsync*
  nameWithType.vb: Data(Of TEntity, TKey).DeleteAsync(TKey, String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteAsync(TKey, String, System.Threading.CancellationToken)
  name.vb: DeleteAsync(TKey, String, CancellationToken)
- uid: Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.String,System.Threading.CancellationToken)
  id: UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: UpsertManyAsync(IEnumerable<TEntity>, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.UpsertManyAsync(IEnumerable<TEntity>, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.UpsertManyAsync(System.Collections.Generic.IEnumerable<TEntity>, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 359
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> UpsertManyAsync(IEnumerable<TEntity> models, string set, CancellationToken ct = default)
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function UpsertManyAsync(models As IEnumerable(Of TEntity), [set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.UpsertManyAsync*
  nameWithType.vb: Data(Of TEntity, TKey).UpsertManyAsync(IEnumerable(Of TEntity), String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).UpsertManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), String, System.Threading.CancellationToken)
  name.vb: UpsertManyAsync(IEnumerable(Of TEntity), String, CancellationToken)
- uid: Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.String,System.Threading.CancellationToken)
  id: DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: DeleteManyAsync(IEnumerable<TKey>, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.DeleteManyAsync(IEnumerable<TKey>, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteManyAsync(System.Collections.Generic.IEnumerable<TKey>, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: DeleteManyAsync
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 362
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> DeleteManyAsync(IEnumerable<TKey> ids, string set, CancellationToken ct = default)
    parameters:
    - id: ids
      type: System.Collections.Generic.IEnumerable{{TKey}}
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function DeleteManyAsync(ids As IEnumerable(Of TKey), [set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.DeleteManyAsync*
  nameWithType.vb: Data(Of TEntity, TKey).DeleteManyAsync(IEnumerable(Of TKey), String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteManyAsync(System.Collections.Generic.IEnumerable(Of TKey), String, System.Threading.CancellationToken)
  name.vb: DeleteManyAsync(IEnumerable(Of TKey), String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  id: Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Delete(Expression<Func<TEntity, bool>>, string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Delete(Expression<Func<TEntity, bool>>, string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Delete(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Delete
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 365
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Delete(Expression<Func<TEntity, bool>> predicate, string set, CancellationToken ct = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Delete(predicate As Expression(Of Func(Of TEntity, Boolean)), [set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.Delete*
  nameWithType.vb: Data(Of TEntity, TKey).Delete(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Delete(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), String, System.Threading.CancellationToken)
  name.vb: Delete(Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  id: Execute``1(Sora.Data.Abstractions.Instructions.Instruction,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Instruction, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute<TResult>(Instruction, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute<TResult>(Sora.Data.Abstractions.Instructions.Instruction, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 384
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(Instruction instruction, CancellationToken ct = default)
    parameters:
    - id: instruction
      type: Sora.Data.Abstractions.Instructions.Instruction
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(instruction As Instruction, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(Of TResult)(Instruction, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(Of TResult)(Sora.Data.Abstractions.Instructions.Instruction, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(Instruction, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  id: Execute``1(Sora.Data.Abstractions.Instructions.Instruction,Sora.Data.Core.IDataService,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Instruction, IDataService, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute<TResult>(Instruction, IDataService, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute<TResult>(Sora.Data.Abstractions.Instructions.Instruction, Sora.Data.Core.IDataService, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 391
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(Instruction instruction, IDataService data, CancellationToken ct = default)
    parameters:
    - id: instruction
      type: Sora.Data.Abstractions.Instructions.Instruction
    - id: data
      type: Sora.Data.Core.IDataService
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(instruction As Instruction, data As IDataService, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(Of TResult)(Instruction, IDataService, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(Of TResult)(Sora.Data.Abstractions.Instructions.Instruction, Sora.Data.Core.IDataService, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(Instruction, IDataService, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute(System.String,System.Threading.CancellationToken)
  id: Execute(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 395
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Execute(string sql, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Execute(sql As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(String, System.Threading.CancellationToken)
  name.vb: Execute(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  id: Execute(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute(string, IDataService, object?, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute(string, IDataService, object?, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute(string, Sora.Data.Core.IDataService, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 402
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> Execute(string sql, IDataService data, object? parameters = null, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: data
      type: Sora.Data.Core.IDataService
    - id: parameters
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Execute(sql As String, data As IDataService, parameters As Object = Nothing, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(String, IDataService, Object, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(String, Sora.Data.Core.IDataService, Object, System.Threading.CancellationToken)
  name.vb: Execute(String, IDataService, Object, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute``1(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute``1(System.String,System.Threading.CancellationToken)
  id: Execute``1(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute<TResult>(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute<TResult>(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute<TResult>(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 405
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(string sql, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(sql As String, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(Of TResult)(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(Of TResult)(String, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  id: Execute``1(System.String,Sora.Data.Core.IDataService,System.Object,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: Execute<TResult>(string, IDataService, object?, CancellationToken)
  nameWithType: Data<TEntity, TKey>.Execute<TResult>(string, IDataService, object?, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute<TResult>(string, Sora.Data.Core.IDataService, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Execute
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 415
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<TResult> Execute<TResult>(string sql, IDataService data, object? parameters = null, CancellationToken ct = default)
    parameters:
    - id: sql
      type: System.String
    - id: data
      type: Sora.Data.Core.IDataService
    - id: parameters
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function Execute(Of TResult)(sql As String, data As IDataService, parameters As Object = Nothing, ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: Sora.Data.Core.Data`2.Execute*
  nameWithType.vb: Data(Of TEntity, TKey).Execute(Of TResult)(String, IDataService, Object, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute(Of TResult)(String, Sora.Data.Core.IDataService, Object, System.Threading.CancellationToken)
  name.vb: Execute(Of TResult)(String, IDataService, Object, CancellationToken)
- uid: Sora.Data.Core.Data`2.ClearSet(System.String,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.ClearSet(System.String,System.Threading.CancellationToken)
  id: ClearSet(System.String,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: ClearSet(string, CancellationToken)
  nameWithType: Data<TEntity, TKey>.ClearSet(string, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.ClearSet(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: ClearSet
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 430
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> ClearSet(string set, CancellationToken ct = default)
    parameters:
    - id: set
      type: System.String
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function ClearSet([set] As String, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.ClearSet*
  nameWithType.vb: Data(Of TEntity, TKey).ClearSet(String, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).ClearSet(String, System.Threading.CancellationToken)
  name.vb: ClearSet(String, CancellationToken)
- uid: Sora.Data.Core.Data`2.CopySet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.CopySet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  id: CopySet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: CopySet(string, string, Expression<Func<TEntity, bool>>?, Func<TEntity, TEntity>?, int, CancellationToken)
  nameWithType: Data<TEntity, TKey>.CopySet(string, string, Expression<Func<TEntity, bool>>?, Func<TEntity, TEntity>?, int, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CopySet(string, string, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>?, System.Func<TEntity, TEntity>?, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: CopySet
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 433
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> CopySet(string fromSet, string toSet, Expression<Func<TEntity, bool>>? predicate = null, Func<TEntity, TEntity>? map = null, int batchSize = 500, CancellationToken ct = default)
    parameters:
    - id: fromSet
      type: System.String
    - id: toSet
      type: System.String
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: map
      type: System.Func{{TEntity},{TEntity}}
    - id: batchSize
      type: System.Int32
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function CopySet(fromSet As String, toSet As String, predicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing, map As Func(Of TEntity, TEntity) = Nothing, batchSize As Integer = 500, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.CopySet*
  nameWithType.vb: Data(Of TEntity, TKey).CopySet(String, String, Expression(Of Func(Of TEntity, Boolean)), Func(Of TEntity, TEntity), Integer, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CopySet(String, String, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Func(Of TEntity, TEntity), Integer, System.Threading.CancellationToken)
  name.vb: CopySet(String, String, Expression(Of Func(Of TEntity, Boolean)), Func(Of TEntity, TEntity), Integer, CancellationToken)
- uid: Sora.Data.Core.Data`2.MoveSet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.MoveSet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  id: MoveSet(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,`0},System.Int32,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: MoveSet(string, string, Expression<Func<TEntity, bool>>?, Func<TEntity, TEntity>?, int, CancellationToken)
  nameWithType: Data<TEntity, TKey>.MoveSet(string, string, Expression<Func<TEntity, bool>>?, Func<TEntity, TEntity>?, int, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.MoveSet(string, string, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>?, System.Func<TEntity, TEntity>?, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: MoveSet
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 458
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> MoveSet(string fromSet, string toSet, Expression<Func<TEntity, bool>>? predicate = null, Func<TEntity, TEntity>? map = null, int batchSize = 500, CancellationToken ct = default)
    parameters:
    - id: fromSet
      type: System.String
    - id: toSet
      type: System.String
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: map
      type: System.Func{{TEntity},{TEntity}}
    - id: batchSize
      type: System.Int32
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function MoveSet(fromSet As String, toSet As String, predicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing, map As Func(Of TEntity, TEntity) = Nothing, batchSize As Integer = 500, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.MoveSet*
  nameWithType.vb: Data(Of TEntity, TKey).MoveSet(String, String, Expression(Of Func(Of TEntity, Boolean)), Func(Of TEntity, TEntity), Integer, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).MoveSet(String, String, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Func(Of TEntity, TEntity), Integer, System.Threading.CancellationToken)
  name.vb: MoveSet(String, String, Expression(Of Func(Of TEntity, Boolean)), Func(Of TEntity, TEntity), Integer, CancellationToken)
- uid: Sora.Data.Core.Data`2.ReplaceSet(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.Data`2.ReplaceSet(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Threading.CancellationToken)
  id: ReplaceSet(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Threading.CancellationToken)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: ReplaceSet(string, IEnumerable<TEntity>, int, CancellationToken)
  nameWithType: Data<TEntity, TKey>.ReplaceSet(string, IEnumerable<TEntity>, int, CancellationToken)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.ReplaceSet(string, System.Collections.Generic.IEnumerable<TEntity>, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: ReplaceSet
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 488
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static Task<int> ReplaceSet(string targetSet, IEnumerable<TEntity> items, int batchSize = 500, CancellationToken ct = default)
    parameters:
    - id: targetSet
      type: System.String
    - id: items
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: batchSize
      type: System.Int32
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function ReplaceSet(targetSet As String, items As IEnumerable(Of TEntity), batchSize As Integer = 500, ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.Data`2.ReplaceSet*
  nameWithType.vb: Data(Of TEntity, TKey).ReplaceSet(String, IEnumerable(Of TEntity), Integer, CancellationToken)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).ReplaceSet(String, System.Collections.Generic.IEnumerable(Of TEntity), Integer, System.Threading.CancellationToken)
  name.vb: ReplaceSet(String, IEnumerable(Of TEntity), Integer, CancellationToken)
- uid: Sora.Data.Core.Data`2.MoveFrom(System.String)
  commentId: M:Sora.Data.Core.Data`2.MoveFrom(System.String)
  id: MoveFrom(System.String)
  parent: Sora.Data.Core.Data`2
  langs:
  - csharp
  - vb
  name: MoveFrom(string)
  nameWithType: Data<TEntity, TKey>.MoveFrom(string)
  fullName: Sora.Data.Core.Data<TEntity, TKey>.MoveFrom(string)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: MoveFrom
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 505
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  syntax:
    content: public static SetMoveBuilder<TEntity, TKey> MoveFrom(string fromSet)
    parameters:
    - id: fromSet
      type: System.String
    return:
      type: Sora.Data.Core.SetMoveBuilder{{TEntity},{TKey}}
    content.vb: Public Shared Function MoveFrom(fromSet As String) As SetMoveBuilder(Of TEntity, TKey)
  overload: Sora.Data.Core.Data`2.MoveFrom*
  nameWithType.vb: Data(Of TEntity, TKey).MoveFrom(String)
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).MoveFrom(String)
  name.vb: MoveFrom(String)
references:
- uid: Sora.Data.Core
  commentId: N:Sora.Data.Core
  href: Sora.html
  name: Sora.Data.Core
  nameWithType: Sora.Data.Core
  fullName: Sora.Data.Core
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sora.Data.Core.Data`2.QueryCaps*
  commentId: Overload:Sora.Data.Core.Data`2.QueryCaps
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_QueryCaps
  name: QueryCaps
  nameWithType: Data<TEntity, TKey>.QueryCaps
  fullName: Sora.Data.Core.Data<TEntity, TKey>.QueryCaps
  nameWithType.vb: Data(Of TEntity, TKey).QueryCaps
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).QueryCaps
- uid: Sora.Data.Abstractions.IQueryCapabilities
  commentId: T:Sora.Data.Abstractions.IQueryCapabilities
  parent: Sora.Data.Abstractions
  href: Sora.Data.Abstractions.IQueryCapabilities.html
  name: IQueryCapabilities
  nameWithType: IQueryCapabilities
  fullName: Sora.Data.Abstractions.IQueryCapabilities
- uid: Sora.Data.Abstractions
  commentId: N:Sora.Data.Abstractions
  href: Sora.html
  name: Sora.Data.Abstractions
  nameWithType: Sora.Data.Abstractions
  fullName: Sora.Data.Abstractions
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
- uid: Sora.Data.Core.Data`2.WriteCaps*
  commentId: Overload:Sora.Data.Core.Data`2.WriteCaps
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_WriteCaps
  name: WriteCaps
  nameWithType: Data<TEntity, TKey>.WriteCaps
  fullName: Sora.Data.Core.Data<TEntity, TKey>.WriteCaps
  nameWithType.vb: Data(Of TEntity, TKey).WriteCaps
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).WriteCaps
- uid: Sora.Data.Abstractions.IWriteCapabilities
  commentId: T:Sora.Data.Abstractions.IWriteCapabilities
  parent: Sora.Data.Abstractions
  href: Sora.Data.Abstractions.IWriteCapabilities.html
  name: IWriteCapabilities
  nameWithType: IWriteCapabilities
  fullName: Sora.Data.Abstractions.IWriteCapabilities
- uid: Sora.Data.Core.Data`2.GetAsync*
  commentId: Overload:Sora.Data.Core.Data`2.GetAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_GetAsync__1_System_Threading_CancellationToken_
  name: GetAsync
  nameWithType: Data<TEntity, TKey>.GetAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.GetAsync
  nameWithType.vb: Data(Of TEntity, TKey).GetAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).GetAsync
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Sora.Data.Core.Data`2.All*
  commentId: Overload:Sora.Data.Core.Data`2.All
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_All_System_Threading_CancellationToken_
  name: All
  nameWithType: Data<TEntity, TKey>.All
  fullName: Sora.Data.Core.Data<TEntity, TKey>.All
  nameWithType.vb: Data(Of TEntity, TKey).All
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).All
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyList<TEntity>>
  nameWithType: Task<IReadOnlyList<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TEntity>>
  nameWithType.vb: Task(Of IReadOnlyList(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of TEntity))
  name.vb: Task(Of IReadOnlyList(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: Sora.Data.Core.Data`2.Query*
  commentId: Overload:Sora.Data.Core.Data`2.Query
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_Query_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  name: Query
  nameWithType: Data<TEntity, TKey>.Query
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Query
  nameWithType.vb: Data(Of TEntity, TKey).Query
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Query
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TEntity, bool>>
  nameWithType: Expression<Func<TEntity, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, bool>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sora.Data.Core.Data`2.CountAllAsync*
  commentId: Overload:Sora.Data.Core.Data`2.CountAllAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_CountAllAsync_System_Threading_CancellationToken_
  name: CountAllAsync
  nameWithType: Data<TEntity, TKey>.CountAllAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAllAsync
  nameWithType.vb: Data(Of TEntity, TKey).CountAllAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAllAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Sora.Data.Core.Data`2.CountAsync*
  commentId: Overload:Sora.Data.Core.Data`2.CountAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_CountAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  name: CountAsync
  nameWithType: Data<TEntity, TKey>.CountAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CountAsync
  nameWithType.vb: Data(Of TEntity, TKey).CountAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CountAsync
- uid: Sora.Data.Core.Data`2.DeleteAsync*
  commentId: Overload:Sora.Data.Core.Data`2.DeleteAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_DeleteAsync__1_System_Threading_CancellationToken_
  name: DeleteAsync
  nameWithType: Data<TEntity, TKey>.DeleteAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteAsync
  nameWithType.vb: Data(Of TEntity, TKey).DeleteAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sora.Data.Core.Data`2.DeleteManyAsync*
  commentId: Overload:Sora.Data.Core.Data`2.DeleteManyAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_DeleteManyAsync_System_Collections_Generic_IEnumerable__1__System_Threading_CancellationToken_
  name: DeleteManyAsync
  nameWithType: Data<TEntity, TKey>.DeleteManyAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteManyAsync
  nameWithType.vb: Data(Of TEntity, TKey).DeleteManyAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteManyAsync
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Sora.Data.Core.Data`2.DeleteAllAsync*
  commentId: Overload:Sora.Data.Core.Data`2.DeleteAllAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_DeleteAllAsync_System_Threading_CancellationToken_
  name: DeleteAllAsync
  nameWithType: Data<TEntity, TKey>.DeleteAllAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.DeleteAllAsync
  nameWithType.vb: Data(Of TEntity, TKey).DeleteAllAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).DeleteAllAsync
- uid: Sora.Data.Core.Data`2.UpsertManyAsync*
  commentId: Overload:Sora.Data.Core.Data`2.UpsertManyAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_UpsertManyAsync_System_Collections_Generic_IEnumerable__0__System_Threading_CancellationToken_
  name: UpsertManyAsync
  nameWithType: Data<TEntity, TKey>.UpsertManyAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.UpsertManyAsync
  nameWithType.vb: Data(Of TEntity, TKey).UpsertManyAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).UpsertManyAsync
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Sora.Data.Core.Data`2.Batch*
  commentId: Overload:Sora.Data.Core.Data`2.Batch
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_Batch
  name: Batch
  nameWithType: Data<TEntity, TKey>.Batch
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Batch
  nameWithType.vb: Data(Of TEntity, TKey).Batch
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Batch
- uid: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
  commentId: T:Sora.Data.Abstractions.IBatchSet{`0,`1}
  parent: Sora.Data.Abstractions
  definition: Sora.Data.Abstractions.IBatchSet`2
  href: Sora.Data.Abstractions.IBatchSet-2.html
  name: IBatchSet<TEntity, TKey>
  nameWithType: IBatchSet<TEntity, TKey>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, TKey>
  nameWithType.vb: IBatchSet(Of TEntity, TKey)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey)
  name.vb: IBatchSet(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Abstractions.IBatchSet`2
  commentId: T:Sora.Data.Abstractions.IBatchSet`2
  parent: Sora.Data.Abstractions
  href: Sora.Data.Abstractions.IBatchSet-2.html
  name: IBatchSet<TEntity, TKey>
  nameWithType: IBatchSet<TEntity, TKey>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, TKey>
  nameWithType.vb: IBatchSet(Of TEntity, TKey)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey)
  name.vb: IBatchSet(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Core.Data`2.WithSet*
  commentId: Overload:Sora.Data.Core.Data`2.WithSet
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_WithSet_System_String_
  name: WithSet
  nameWithType: Data<TEntity, TKey>.WithSet
  fullName: Sora.Data.Core.Data<TEntity, TKey>.WithSet
  nameWithType.vb: Data(Of TEntity, TKey).WithSet
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).WithSet
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Sora.Data.Core.Data`2.UpsertAsync*
  commentId: Overload:Sora.Data.Core.Data`2.UpsertAsync
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_UpsertAsync__0_System_String_System_Threading_CancellationToken_
  name: UpsertAsync
  nameWithType: Data<TEntity, TKey>.UpsertAsync
  fullName: Sora.Data.Core.Data<TEntity, TKey>.UpsertAsync
  nameWithType.vb: Data(Of TEntity, TKey).UpsertAsync
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).UpsertAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Sora.Data.Core.Data`2.Delete*
  commentId: Overload:Sora.Data.Core.Data`2.Delete
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_Delete_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_String_System_Threading_CancellationToken_
  name: Delete
  nameWithType: Data<TEntity, TKey>.Delete
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Delete
  nameWithType.vb: Data(Of TEntity, TKey).Delete
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Delete
- uid: Sora.Data.Core.Data`2.Execute*
  commentId: Overload:Sora.Data.Core.Data`2.Execute
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_Execute__1_Sora_Data_Abstractions_Instructions_Instruction_System_Threading_CancellationToken_
  name: Execute
  nameWithType: Data<TEntity, TKey>.Execute
  fullName: Sora.Data.Core.Data<TEntity, TKey>.Execute
  nameWithType.vb: Data(Of TEntity, TKey).Execute
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).Execute
- uid: Sora.Data.Abstractions.Instructions.Instruction
  commentId: T:Sora.Data.Abstractions.Instructions.Instruction
  parent: Sora.Data.Abstractions.Instructions
  href: Sora.Data.Abstractions.Instructions.Instruction.html
  name: Instruction
  nameWithType: Instruction
  fullName: Sora.Data.Abstractions.Instructions.Instruction
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Sora.Data.Abstractions.Instructions
  commentId: N:Sora.Data.Abstractions.Instructions
  href: Sora.html
  name: Sora.Data.Abstractions.Instructions
  nameWithType: Sora.Data.Abstractions.Instructions
  fullName: Sora.Data.Abstractions.Instructions
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  - name: .
  - uid: Sora.Data.Abstractions.Instructions
    name: Instructions
    href: Sora.Data.Abstractions.Instructions.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  - name: .
  - uid: Sora.Data.Abstractions.Instructions
    name: Instructions
    href: Sora.Data.Abstractions.Instructions.html
- uid: Sora.Data.Core.IDataService
  commentId: T:Sora.Data.Core.IDataService
  parent: Sora.Data.Core
  href: Sora.Data.Core.IDataService.html
  name: IDataService
  nameWithType: IDataService
  fullName: Sora.Data.Core.IDataService
- uid: Sora.Data.Core.Data`2.ClearSet*
  commentId: Overload:Sora.Data.Core.Data`2.ClearSet
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_ClearSet_System_String_System_Threading_CancellationToken_
  name: ClearSet
  nameWithType: Data<TEntity, TKey>.ClearSet
  fullName: Sora.Data.Core.Data<TEntity, TKey>.ClearSet
  nameWithType.vb: Data(Of TEntity, TKey).ClearSet
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).ClearSet
- uid: Sora.Data.Core.Data`2.CopySet*
  commentId: Overload:Sora.Data.Core.Data`2.CopySet
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_CopySet_System_String_System_String_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Func__0__0__System_Int32_System_Threading_CancellationToken_
  name: CopySet
  nameWithType: Data<TEntity, TKey>.CopySet
  fullName: Sora.Data.Core.Data<TEntity, TKey>.CopySet
  nameWithType.vb: Data(Of TEntity, TKey).CopySet
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).CopySet
- uid: System.Func{{TEntity},{TEntity}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TEntity, TEntity>
  nameWithType: Func<TEntity, TEntity>
  fullName: System.Func<TEntity, TEntity>
  nameWithType.vb: Func(Of TEntity, TEntity)
  fullName.vb: System.Func(Of TEntity, TEntity)
  name.vb: Func(Of TEntity, TEntity)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Sora.Data.Core.Data`2.MoveSet*
  commentId: Overload:Sora.Data.Core.Data`2.MoveSet
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_MoveSet_System_String_System_String_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Func__0__0__System_Int32_System_Threading_CancellationToken_
  name: MoveSet
  nameWithType: Data<TEntity, TKey>.MoveSet
  fullName: Sora.Data.Core.Data<TEntity, TKey>.MoveSet
  nameWithType.vb: Data(Of TEntity, TKey).MoveSet
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).MoveSet
- uid: Sora.Data.Core.Data`2.ReplaceSet*
  commentId: Overload:Sora.Data.Core.Data`2.ReplaceSet
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_ReplaceSet_System_String_System_Collections_Generic_IEnumerable__0__System_Int32_System_Threading_CancellationToken_
  name: ReplaceSet
  nameWithType: Data<TEntity, TKey>.ReplaceSet
  fullName: Sora.Data.Core.Data<TEntity, TKey>.ReplaceSet
  nameWithType.vb: Data(Of TEntity, TKey).ReplaceSet
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).ReplaceSet
- uid: Sora.Data.Core.Data`2.MoveFrom*
  commentId: Overload:Sora.Data.Core.Data`2.MoveFrom
  href: Sora.Data.Core.Data-2.html#Sora_Data_Core_Data_2_MoveFrom_System_String_
  name: MoveFrom
  nameWithType: Data<TEntity, TKey>.MoveFrom
  fullName: Sora.Data.Core.Data<TEntity, TKey>.MoveFrom
  nameWithType.vb: Data(Of TEntity, TKey).MoveFrom
  fullName.vb: Sora.Data.Core.Data(Of TEntity, TKey).MoveFrom
- uid: Sora.Data.Core.SetMoveBuilder{{TEntity},{TKey}}
  commentId: T:Sora.Data.Core.SetMoveBuilder{`0,`1}
  parent: Sora.Data.Core
  definition: Sora.Data.Core.SetMoveBuilder`2
  href: Sora.Data.Core.SetMoveBuilder-2.html
  name: SetMoveBuilder<TEntity, TKey>
  nameWithType: SetMoveBuilder<TEntity, TKey>
  fullName: Sora.Data.Core.SetMoveBuilder<TEntity, TKey>
  nameWithType.vb: SetMoveBuilder(Of TEntity, TKey)
  fullName.vb: Sora.Data.Core.SetMoveBuilder(Of TEntity, TKey)
  name.vb: SetMoveBuilder(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Core.SetMoveBuilder`2
    name: SetMoveBuilder
    href: Sora.Data.Core.SetMoveBuilder-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Core.SetMoveBuilder`2
    name: SetMoveBuilder
    href: Sora.Data.Core.SetMoveBuilder-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Core.SetMoveBuilder`2
  commentId: T:Sora.Data.Core.SetMoveBuilder`2
  parent: Sora.Data.Core
  href: Sora.Data.Core.SetMoveBuilder-2.html
  name: SetMoveBuilder<TEntity, TKey>
  nameWithType: SetMoveBuilder<TEntity, TKey>
  fullName: Sora.Data.Core.SetMoveBuilder<TEntity, TKey>
  nameWithType.vb: SetMoveBuilder(Of TEntity, TKey)
  fullName.vb: Sora.Data.Core.SetMoveBuilder(Of TEntity, TKey)
  name.vb: SetMoveBuilder(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Core.SetMoveBuilder`2
    name: SetMoveBuilder
    href: Sora.Data.Core.SetMoveBuilder-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Core.SetMoveBuilder`2
    name: SetMoveBuilder
    href: Sora.Data.Core.SetMoveBuilder-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
