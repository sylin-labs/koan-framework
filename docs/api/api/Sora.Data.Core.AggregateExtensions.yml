### YamlMime:ManagedReference
items:
- uid: Sora.Data.Core.AggregateExtensions
  commentId: T:Sora.Data.Core.AggregateExtensions
  id: AggregateExtensions
  parent: Sora.Data.Core
  children:
  - Sora.Data.Core.AggregateExtensions.AddRange``2(Sora.Data.Abstractions.IBatchSet{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Sora.Data.Core.AggregateExtensions.AsBatch``1(System.Collections.Generic.IEnumerable{``0})
  - Sora.Data.Core.AggregateExtensions.AsBatch``2(System.Collections.Generic.IEnumerable{``0})
  - Sora.Data.Core.AggregateExtensions.Delete(System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Remove``1(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Remove``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Remove``2(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.SaveReplacing``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.SaveReplacing``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Save``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Save``1(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Save``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Save``2(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Upsert(System.Object,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.UpsertId``1(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.UpsertId``2(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Upsert``1(``0,System.Threading.CancellationToken)
  - Sora.Data.Core.AggregateExtensions.Upsert``2(``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AggregateExtensions
  nameWithType: AggregateExtensions
  fullName: Sora.Data.Core.AggregateExtensions
  type: Class
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: AggregateExtensions
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 18
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: >-
    High-level convenience extensions for aggregates and collections.

    Wraps repository calls with concise verbs (Upsert, Save, Remove),

    keeps parity with domain static helpers, and hides service lookups.
  example: []
  syntax:
    content: public static class AggregateExtensions
    content.vb: Public Module AggregateExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Sora.Data.Core.AggregateExtensions.Upsert``2(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Upsert``2(``0,System.Threading.CancellationToken)
  id: Upsert``2(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Upsert<TEntity, TKey>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Upsert<TEntity, TKey>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Upsert<TEntity, TKey>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Upsert
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 29
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: >-
    Insert or update a model for the aggregate using its configured repository.

    Ensures identifiers via the identity manager and returns the saved entity.
  example: []
  syntax:
    content: 'public static Task<TEntity> Upsert<TEntity, TKey>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function Upsert(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(model As TEntity, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.AggregateExtensions.Upsert*
  nameWithType.vb: AggregateExtensions.Upsert(Of TEntity, TKey)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Upsert(Of TEntity, TKey)(TEntity, System.Threading.CancellationToken)
  name.vb: Upsert(Of TEntity, TKey)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Save``2(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Save``2(``0,System.Threading.CancellationToken)
  id: Save``2(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Save<TEntity, TKey>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Save<TEntity, TKey>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Save<TEntity, TKey>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Save
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 38
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Alias for Upsert for generic-key entities; intended as a friendly verb in app code.
  example: []
  syntax:
    content: 'public static Task<TEntity> Save<TEntity, TKey>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function Save(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(model As TEntity, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.AggregateExtensions.Save*
  nameWithType.vb: AggregateExtensions.Save(Of TEntity, TKey)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Save(Of TEntity, TKey)(TEntity, System.Threading.CancellationToken)
  name.vb: Save(Of TEntity, TKey)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Upsert``1(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Upsert``1(``0,System.Threading.CancellationToken)
  id: Upsert``1(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Upsert<TEntity>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Upsert<TEntity>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Upsert<TEntity>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Upsert
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 47
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Upsert for string-keyed entities without specifying TKey.
  example: []
  syntax:
    content: 'public static Task<TEntity> Upsert<TEntity>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function Upsert(Of TEntity As {Class, IEntity(Of String)})(model As TEntity, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.AggregateExtensions.Upsert*
  nameWithType.vb: AggregateExtensions.Upsert(Of TEntity)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Upsert(Of TEntity)(TEntity, System.Threading.CancellationToken)
  name.vb: Upsert(Of TEntity)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Save``1(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Save``1(``0,System.Threading.CancellationToken)
  id: Save``1(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Save<TEntity>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Save<TEntity>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Save<TEntity>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Save
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 55
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Save alias for string-keyed entities.
  example: []
  syntax:
    content: 'public static Task<TEntity> Save<TEntity>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Shared Function Save(Of TEntity As {Class, IEntity(Of String)})(model As TEntity, ct As CancellationToken = Nothing) As Task(Of TEntity)
  overload: Sora.Data.Core.AggregateExtensions.Save*
  nameWithType.vb: AggregateExtensions.Save(Of TEntity)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Save(Of TEntity)(TEntity, System.Threading.CancellationToken)
  name.vb: Save(Of TEntity)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.UpsertId``2(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.UpsertId``2(``0,System.Threading.CancellationToken)
  id: UpsertId``2(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: UpsertId<TEntity, TKey>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.UpsertId<TEntity, TKey>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.UpsertId<TEntity, TKey>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertId
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 63
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Upsert and return only the identifier (generic key).
  example: []
  syntax:
    content: 'public static Task<TKey> UpsertId<TEntity, TKey>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{{TKey}}
    content.vb: Public Shared Function UpsertId(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(model As TEntity, ct As CancellationToken = Nothing) As Task(Of TKey)
  overload: Sora.Data.Core.AggregateExtensions.UpsertId*
  nameWithType.vb: AggregateExtensions.UpsertId(Of TEntity, TKey)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.UpsertId(Of TEntity, TKey)(TEntity, System.Threading.CancellationToken)
  name.vb: UpsertId(Of TEntity, TKey)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.UpsertId``1(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.UpsertId``1(``0,System.Threading.CancellationToken)
  id: UpsertId``1(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: UpsertId<TEntity>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.UpsertId<TEntity>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.UpsertId<TEntity>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: UpsertId
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 72
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Upsert and return only the identifier (string key convenience).
  example: []
  syntax:
    content: 'public static Task<string> UpsertId<TEntity>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function UpsertId(Of TEntity As {Class, IEntity(Of String)})(model As TEntity, ct As CancellationToken = Nothing) As Task(Of String)
  overload: Sora.Data.Core.AggregateExtensions.UpsertId*
  nameWithType.vb: AggregateExtensions.UpsertId(Of TEntity)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.UpsertId(Of TEntity)(TEntity, System.Threading.CancellationToken)
  name.vb: UpsertId(Of TEntity)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Upsert(System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Upsert(System.Object,System.Threading.CancellationToken)
  id: Upsert(System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Upsert(object, CancellationToken)
  nameWithType: AggregateExtensions.Upsert(object, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Upsert(object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Upsert
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 80
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Runtime Upsert for unknown entity types; reflects the repository and UpsertAsync method.
  example: []
  syntax:
    content: public static Task<object?> Upsert(this object model, CancellationToken ct = default)
    parameters:
    - id: model
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Shared Function Upsert(model As Object, ct As CancellationToken = Nothing) As Task(Of Object)
  overload: Sora.Data.Core.AggregateExtensions.Upsert*
  nameWithType.vb: AggregateExtensions.Upsert(Object, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Upsert(Object, System.Threading.CancellationToken)
  name.vb: Upsert(Object, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Delete(System.Object,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Delete(System.Object,System.Threading.CancellationToken)
  id: Delete(System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Delete(object, CancellationToken)
  nameWithType: AggregateExtensions.Delete(object, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Delete(object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Delete
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 98
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Runtime Delete for unknown entity types; uses Identifier metadata or Id to locate the key.
  example: []
  syntax:
    content: public static Task<bool> Delete(this object model, CancellationToken ct = default)
    parameters:
    - id: model
      type: System.Object
    - id: ct
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function Delete(model As Object, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.AggregateExtensions.Delete*
  nameWithType.vb: AggregateExtensions.Delete(Object, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Delete(Object, System.Threading.CancellationToken)
  name.vb: Delete(Object, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Remove``2(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Remove``2(``0,System.Threading.CancellationToken)
  id: Remove``2(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Remove<TEntity, TKey>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Remove<TEntity, TKey>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Remove<TEntity, TKey>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Remove
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 118
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Remove a single entity by its id (typed convenience mirroring Entity.Remove).
  example: []
  syntax:
    content: 'public static Task<bool> Remove<TEntity, TKey>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function Remove(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(model As TEntity, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.AggregateExtensions.Remove*
  nameWithType.vb: AggregateExtensions.Remove(Of TEntity, TKey)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Remove(Of TEntity, TKey)(TEntity, System.Threading.CancellationToken)
  name.vb: Remove(Of TEntity, TKey)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Remove``1(``0,System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Remove``1(``0,System.Threading.CancellationToken)
  id: Remove``1(``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Remove<TEntity>(TEntity, CancellationToken)
  nameWithType: AggregateExtensions.Remove<TEntity>(TEntity, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Remove<TEntity>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Remove
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 127
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Remove a single entity (string-key convenience).
  example: []
  syntax:
    content: 'public static Task<bool> Remove<TEntity>(this TEntity model, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: model
      type: '{TEntity}'
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function Remove(Of TEntity As {Class, IEntity(Of String)})(model As TEntity, ct As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Sora.Data.Core.AggregateExtensions.Remove*
  nameWithType.vb: AggregateExtensions.Remove(Of TEntity)(TEntity, CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Remove(Of TEntity)(TEntity, System.Threading.CancellationToken)
  name.vb: Remove(Of TEntity)(TEntity, CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Save``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Save``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: Save``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Save<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.Save<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Save<TEntity, TKey>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Save
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 146
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Bulk upsert a collection; providers may optimize to native bulk operations.
  example: []
  syntax:
    content: 'public static Task<int> Save<TEntity, TKey>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Save(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.Save*
  nameWithType.vb: AggregateExtensions.Save(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Save(Of TEntity, TKey)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: Save(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Save``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Save``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: Save``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Save<TEntity>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.Save<TEntity>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Save<TEntity>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Save
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 155
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Bulk upsert (string-key convenience).
  example: []
  syntax:
    content: 'public static Task<int> Save<TEntity>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Save(Of TEntity As {Class, IEntity(Of String)})(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.Save*
  nameWithType.vb: AggregateExtensions.Save(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Save(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: Save(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Remove``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Remove``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: Remove``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Remove<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.Remove<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Remove<TEntity, TKey>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Remove
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 163
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Bulk remove a collection by projecting ids.
  example: []
  syntax:
    content: 'public static Task<int> Remove<TEntity, TKey>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Remove(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.Remove*
  nameWithType.vb: AggregateExtensions.Remove(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Remove(Of TEntity, TKey)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: Remove(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: Remove``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: Remove<TEntity>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.Remove<TEntity>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.Remove<TEntity>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: Remove
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 172
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Bulk remove (string-key convenience).
  example: []
  syntax:
    content: 'public static Task<int> Remove<TEntity>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function Remove(Of TEntity As {Class, IEntity(Of String)})(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.Remove*
  nameWithType.vb: AggregateExtensions.Remove(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.Remove(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: Remove(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.SaveReplacing``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.SaveReplacing``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: SaveReplacing``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: SaveReplacing<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.SaveReplacing<TEntity, TKey>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.SaveReplacing<TEntity, TKey>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: SaveReplacing
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 181
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: >-
    Replace the entire set with the provided models: delete all then upsert.

    Intended for dev/test seeding and idempotent resets; avoid on large datasets.
  example: []
  syntax:
    content: 'public static Task<int> SaveReplacing<TEntity, TKey>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function SaveReplacing(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.SaveReplacing*
  nameWithType.vb: AggregateExtensions.SaveReplacing(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.SaveReplacing(Of TEntity, TKey)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: SaveReplacing(Of TEntity, TKey)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.SaveReplacing``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Sora.Data.Core.AggregateExtensions.SaveReplacing``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  id: SaveReplacing``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: SaveReplacing<TEntity>(IEnumerable<TEntity>, CancellationToken)
  nameWithType: AggregateExtensions.SaveReplacing<TEntity>(IEnumerable<TEntity>, CancellationToken)
  fullName: Sora.Data.Core.AggregateExtensions.SaveReplacing<TEntity>(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: SaveReplacing
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 198
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: String-key convenience for SaveReplacing.
  example: []
  syntax:
    content: 'public static Task<int> SaveReplacing<TEntity>(this IEnumerable<TEntity> models, CancellationToken ct = default) where TEntity : class, IEntity<string>'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function SaveReplacing(Of TEntity As {Class, IEntity(Of String)})(models As IEnumerable(Of TEntity), ct As CancellationToken = Nothing) As Task(Of Integer)
  overload: Sora.Data.Core.AggregateExtensions.SaveReplacing*
  nameWithType.vb: AggregateExtensions.SaveReplacing(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: Sora.Data.Core.AggregateExtensions.SaveReplacing(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: SaveReplacing(Of TEntity)(IEnumerable(Of TEntity), CancellationToken)
- uid: Sora.Data.Core.AggregateExtensions.AsBatch``2(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Sora.Data.Core.AggregateExtensions.AsBatch``2(System.Collections.Generic.IEnumerable{``0})
  id: AsBatch``2(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: AsBatch<TEntity, TKey>(IEnumerable<TEntity>)
  nameWithType: AggregateExtensions.AsBatch<TEntity, TKey>(IEnumerable<TEntity>)
  fullName: Sora.Data.Core.AggregateExtensions.AsBatch<TEntity, TKey>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: AsBatch
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 206
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Convert a collection to a pre-filled batch by queuing add operations.
  example: []
  syntax:
    content: 'public static IBatchSet<TEntity, TKey> AsBatch<TEntity, TKey>(this IEnumerable<TEntity> models) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
    content.vb: Public Shared Function AsBatch(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(models As IEnumerable(Of TEntity)) As IBatchSet(Of TEntity, TKey)
  overload: Sora.Data.Core.AggregateExtensions.AsBatch*
  nameWithType.vb: AggregateExtensions.AsBatch(Of TEntity, TKey)(IEnumerable(Of TEntity))
  fullName.vb: Sora.Data.Core.AggregateExtensions.AsBatch(Of TEntity, TKey)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AsBatch(Of TEntity, TKey)(IEnumerable(Of TEntity))
- uid: Sora.Data.Core.AggregateExtensions.AsBatch``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Sora.Data.Core.AggregateExtensions.AsBatch``1(System.Collections.Generic.IEnumerable{``0})
  id: AsBatch``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: AsBatch<TEntity>(IEnumerable<TEntity>)
  nameWithType: AggregateExtensions.AsBatch<TEntity>(IEnumerable<TEntity>)
  fullName: Sora.Data.Core.AggregateExtensions.AsBatch<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: AsBatch
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 219
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: String-key convenience for AsBatch.
  example: []
  syntax:
    content: 'public static IBatchSet<TEntity, string> AsBatch<TEntity>(this IEnumerable<TEntity> models) where TEntity : class, IEntity<string>'
    parameters:
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},System.String}
    content.vb: Public Shared Function AsBatch(Of TEntity As {Class, IEntity(Of String)})(models As IEnumerable(Of TEntity)) As IBatchSet(Of TEntity, String)
  overload: Sora.Data.Core.AggregateExtensions.AsBatch*
  nameWithType.vb: AggregateExtensions.AsBatch(Of TEntity)(IEnumerable(Of TEntity))
  fullName.vb: Sora.Data.Core.AggregateExtensions.AsBatch(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AsBatch(Of TEntity)(IEnumerable(Of TEntity))
- uid: Sora.Data.Core.AggregateExtensions.AddRange``2(Sora.Data.Abstractions.IBatchSet{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Sora.Data.Core.AggregateExtensions.AddRange``2(Sora.Data.Abstractions.IBatchSet{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: AddRange``2(Sora.Data.Abstractions.IBatchSet{``0,``1},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Sora.Data.Core.AggregateExtensions
  langs:
  - csharp
  - vb
  name: AddRange<TEntity, TKey>(IBatchSet<TEntity, TKey>, IEnumerable<TEntity>)
  nameWithType: AggregateExtensions.AddRange<TEntity, TKey>(IBatchSet<TEntity, TKey>, IEnumerable<TEntity>)
  fullName: Sora.Data.Core.AggregateExtensions.AddRange<TEntity, TKey>(Sora.Data.Abstractions.IBatchSet<TEntity, TKey>, System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Sora.Data.Core/AggregateExtensions.cs
      branch: dev
      repo: https://github.com/sylin-labs/sora-framework.git
    id: AddRange
    path: ../../src/Sora.Data.Core/AggregateExtensions.cs
    startLine: 231
  assemblies:
  - Sora.Data.Core
  namespace: Sora.Data.Core
  summary: Add many entities to an existing batch for fluent composition.
  example: []
  syntax:
    content: 'public static IBatchSet<TEntity, TKey> AddRange<TEntity, TKey>(this IBatchSet<TEntity, TKey> batch, IEnumerable<TEntity> models) where TEntity : class, IEntity<TKey> where TKey : notnull'
    parameters:
    - id: batch
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
    - id: models
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
    content.vb: Public Shared Function AddRange(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(batch As IBatchSet(Of TEntity, TKey), models As IEnumerable(Of TEntity)) As IBatchSet(Of TEntity, TKey)
  overload: Sora.Data.Core.AggregateExtensions.AddRange*
  nameWithType.vb: AggregateExtensions.AddRange(Of TEntity, TKey)(IBatchSet(Of TEntity, TKey), IEnumerable(Of TEntity))
  fullName.vb: Sora.Data.Core.AggregateExtensions.AddRange(Of TEntity, TKey)(Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey), System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AddRange(Of TEntity, TKey)(IBatchSet(Of TEntity, TKey), IEnumerable(Of TEntity))
references:
- uid: Sora.Data.Core
  commentId: N:Sora.Data.Core
  href: Sora.html
  name: Sora.Data.Core
  nameWithType: Sora.Data.Core
  fullName: Sora.Data.Core
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Core
    name: Core
    href: Sora.Data.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sora.Data.Core.AggregateExtensions.Upsert*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.Upsert
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_Upsert__2___0_System_Threading_CancellationToken_
  name: Upsert
  nameWithType: AggregateExtensions.Upsert
  fullName: Sora.Data.Core.AggregateExtensions.Upsert
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Sora.Data.Core.AggregateExtensions.Save*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.Save
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_Save__2___0_System_Threading_CancellationToken_
  name: Save
  nameWithType: AggregateExtensions.Save
  fullName: Sora.Data.Core.AggregateExtensions.Save
- uid: Sora.Data.Core.AggregateExtensions.UpsertId*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.UpsertId
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_UpsertId__2___0_System_Threading_CancellationToken_
  name: UpsertId
  nameWithType: AggregateExtensions.UpsertId
  fullName: Sora.Data.Core.AggregateExtensions.UpsertId
- uid: System.Threading.Tasks.Task{{TKey}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TKey>
  nameWithType: Task<TKey>
  fullName: System.Threading.Tasks.Task<TKey>
  nameWithType.vb: Task(Of TKey)
  fullName.vb: System.Threading.Tasks.Task(Of TKey)
  name.vb: Task(Of TKey)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<object>
  nameWithType: Task<object>
  fullName: System.Threading.Tasks.Task<object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Sora.Data.Core.AggregateExtensions.Delete*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.Delete
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_Delete_System_Object_System_Threading_CancellationToken_
  name: Delete
  nameWithType: AggregateExtensions.Delete
  fullName: Sora.Data.Core.AggregateExtensions.Delete
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sora.Data.Core.AggregateExtensions.Remove*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.Remove
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_Remove__2___0_System_Threading_CancellationToken_
  name: Remove
  nameWithType: AggregateExtensions.Remove
  fullName: Sora.Data.Core.AggregateExtensions.Remove
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Sora.Data.Core.AggregateExtensions.SaveReplacing*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.SaveReplacing
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_SaveReplacing__2_System_Collections_Generic_IEnumerable___0__System_Threading_CancellationToken_
  name: SaveReplacing
  nameWithType: AggregateExtensions.SaveReplacing
  fullName: Sora.Data.Core.AggregateExtensions.SaveReplacing
- uid: Sora.Data.Core.AggregateExtensions.AsBatch*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.AsBatch
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_AsBatch__2_System_Collections_Generic_IEnumerable___0__
  name: AsBatch
  nameWithType: AggregateExtensions.AsBatch
  fullName: Sora.Data.Core.AggregateExtensions.AsBatch
- uid: Sora.Data.Abstractions.IBatchSet{{TEntity},{TKey}}
  commentId: T:Sora.Data.Abstractions.IBatchSet{`0,`1}
  parent: Sora.Data.Abstractions
  definition: Sora.Data.Abstractions.IBatchSet`2
  href: Sora.Data.Abstractions.IBatchSet-2.html
  name: IBatchSet<TEntity, TKey>
  nameWithType: IBatchSet<TEntity, TKey>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, TKey>
  nameWithType.vb: IBatchSet(Of TEntity, TKey)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey)
  name.vb: IBatchSet(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Abstractions.IBatchSet`2
  commentId: T:Sora.Data.Abstractions.IBatchSet`2
  parent: Sora.Data.Abstractions
  href: Sora.Data.Abstractions.IBatchSet-2.html
  name: IBatchSet<TEntity, TKey>
  nameWithType: IBatchSet<TEntity, TKey>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, TKey>
  nameWithType.vb: IBatchSet(Of TEntity, TKey)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, TKey)
  name.vb: IBatchSet(Of TEntity, TKey)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
    href: Sora.Data.Abstractions.IBatchSet-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Sora.Data.Abstractions
  commentId: N:Sora.Data.Abstractions
  href: Sora.html
  name: Sora.Data.Abstractions
  nameWithType: Sora.Data.Abstractions
  fullName: Sora.Data.Abstractions
  spec.csharp:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
  spec.vb:
  - uid: Sora
    name: Sora
    href: Sora.html
  - name: .
  - uid: Sora.Data
    name: Data
    href: Sora.Data.html
  - name: .
  - uid: Sora.Data.Abstractions
    name: Abstractions
    href: Sora.Data.Abstractions.html
- uid: Sora.Data.Abstractions.IBatchSet{{TEntity},System.String}
  commentId: T:Sora.Data.Abstractions.IBatchSet{``0,System.String}
  parent: Sora.Data.Abstractions
  definition: Sora.Data.Abstractions.IBatchSet`2
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: IBatchSet<TEntity, string>
  nameWithType: IBatchSet<TEntity, string>
  fullName: Sora.Data.Abstractions.IBatchSet<TEntity, string>
  nameWithType.vb: IBatchSet(Of TEntity, String)
  fullName.vb: Sora.Data.Abstractions.IBatchSet(Of TEntity, String)
  name.vb: IBatchSet(Of TEntity, String)
  spec.csharp:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Sora.Data.Abstractions.IBatchSet`2
    name: IBatchSet
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sora.Data.Core.AggregateExtensions.AddRange*
  commentId: Overload:Sora.Data.Core.AggregateExtensions.AddRange
  href: Sora.Data.Core.AggregateExtensions.html#Sora_Data_Core_AggregateExtensions_AddRange__2_Sora_Data_Abstractions_IBatchSet___0___1__System_Collections_Generic_IEnumerable___0__
  name: AddRange
  nameWithType: AggregateExtensions.AddRange
  fullName: Sora.Data.Core.AggregateExtensions.AddRange
